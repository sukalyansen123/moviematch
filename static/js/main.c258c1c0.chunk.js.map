{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","value","recoms","handleChange","bind","handleSubmit","event","this","setState","target","fetch","then","response","console","log","alert","name","catch","error","onSubmit","type","onChange","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA+CeA,G,wDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAIV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,yDAYNE,GACXC,KAAKC,SAAS,CAACP,MAAOK,EAAMG,OAAOR,U,qCAKjCS,MAAM,gBACLC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAQ,WACpBG,MAAMH,EAAQ,UAAcI,SAE7BC,OAAM,SAAAC,GACLL,QAAQC,IAAII,Q,+BAKhB,OACE,uBAAMC,SAAUZ,KAAKF,aAArB,UACE,0CAEE,uBAAOe,KAAK,OAAOnB,MAAOM,KAAKP,MAAMC,MAAOoB,SAAUd,KAAKJ,kBAE7D,uBAAOiB,KAAK,SAASnB,MAAM,SAASqB,QAAWf,KAAKF,aAAaD,KAAKG,e,GApC5DgB,IAAMC,YCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c258c1c0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      recoms: [],\n    \n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit() {\n   \n      fetch('./movie.json')\n      .then(response => {\n        console.log(response[\"Inception\"])\n        alert(response[\"Inception\"].name)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" onClick = {this.handleSubmit.bind(this)}/>\n      </form>\n\n      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}